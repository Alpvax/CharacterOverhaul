package alpvax.characteroverhaul.core;

import static alpvax.characteroverhaul.api.CharacterOverhaulReference.MOD_ID;

import java.util.List;

import org.apache.logging.log4j.Level;

import alpvax.characteroverhaul.api.CharacterOverhaulReference;
import alpvax.characteroverhaul.api.character.modifier.CharacterModifierFactory;
import alpvax.characteroverhaul.api.perk.Perk;
import alpvax.characteroverhaul.api.skill.Skill;
import alpvax.characteroverhaul.capabilities.CapabilityCharacterHandler;
import alpvax.characteroverhaul.core.proxy.CommonProxy;
import net.minecraft.client.resources.I18n;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.config.Configuration;
import net.minecraftforge.fml.client.event.ConfigChangedEvent;
import net.minecraftforge.fml.common.FMLLog;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.Metadata;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.common.network.simpleimpl.SimpleNetworkWrapper;

@Mod(modid = CharacterOverhaulReference.MOD_ID, version = CharacterOverhaulReference.VERSION, guiFactory = "alpvax.characteroverhaul.client.COGuiFactory")
public class CharacterOverhaul
{
	@SidedProxy(
			clientSide = "alpvax.characteroverhaul.core.proxy.ClientProxy",
			serverSide = "alpvax.characteroverhaul.core.proxy.CommonProxy")
	public static CommonProxy proxy;

	public static SimpleNetworkWrapper network;

	@Mod.Instance(MOD_ID)
	public static CharacterOverhaul instance;

	@Metadata(MOD_ID)
	public static ModMetadata meta;

	public static Configuration config;

	@Mod.EventHandler
	public void preInit(FMLPreInitializationEvent e)
	{
		meta.name = I18n.format("mod." + MOD_ID + ".name");
		meta.description = I18n.format("mod." + MOD_ID + ".description");
		meta.authorList.add("Alpvax");
		meta.autogenerated = false;

		network = NetworkRegistry.INSTANCE.newSimpleChannel(CharacterOverhaulReference.MOD_ID);
		registerPackets();

		proxy.registerPre();

		CapabilityCharacterHandler.register();
		MinecraftForge.EVENT_BUS.register(instance);
		MinecraftForge.EVENT_BUS.register(new CharacterOverhaulHooks());
	}

	@Mod.EventHandler
	public void postInit(FMLPostInitializationEvent e)
	{
		String form = "Detected %d registered %s:%n";
		int num;
		StringBuilder sb;
		//Ensure Skills registry is initialised, even if no skills were registered
		List<Skill> skills = Skill.getAllSkills();
		num = skills.size();
		sb = new StringBuilder(String.format(form, num, num == 1 ? "skill" : "skills"));
		for(Skill s : skills)
		{
			sb.append("\n").append(s.getRegistryName().toString());
		}
		FMLLog.log("Character Overhaul", Level.INFO, sb.toString());
		//Ensure Perks registry is initialised, even if no perks were registered
		List<Perk> perks = Perk.REGISTRY.getValues();
		num = skills.size();
		sb = new StringBuilder(String.format(form, num, num == 1 ? "perk" : "perks"));
		for(Perk p : perks)
		{
			sb.append("\n").append(p.getRegistryName().toString()).append(" (").append(p.getDisplayName()).append(")");
		}
		FMLLog.log("Character Overhaul", Level.INFO, sb.toString());
		//Ensure Modifiers registry is initialised, even if no factories were registered
		List<CharacterModifierFactory<?>> modifiers = CharacterModifierFactory.REGISTRY.getValues();
		num = skills.size();
		sb = new StringBuilder(String.format(form, num, "character modifier " + (num == 1 ? "factory" : "factories")));
		for(CharacterModifierFactory<?> m : modifiers)
		{
			sb.append("\n").append(m.getRegistryName().toString());
		}
		FMLLog.log("Character Overhaul", Level.INFO, sb.toString());
	}

	private void registerPackets()
	{
		//network.registerMessage(ConfigMessage.Handler.class, ConfigMessage.class, 0, Side.SERVER);
		// network.registerMessage(SecondMessage.Handler.class, SecondMessage.class, 1, Side.CLIENT);
	}

	@SubscribeEvent
	public void onConfigChanged(ConfigChangedEvent.OnConfigChangedEvent event)
	{
		if(event.getModID().equals(CharacterOverhaulReference.MOD_ID))
		{
			syncConfig();
		}
	}

	public void syncConfig()
	{
	}
}
